1.使用最新AS创建项目
2.配置.gitignore+混淆+settings.gradle[jitpack]+build.gradle[签名、渠道、打包]
3.

各项启动顺序处理
日志打印正式服屏蔽
打包渠道和各项配置
全局livedata数据处理
局部livedata处理
登出需要清理的数据
语言切换需要重新请求的接口（尽量做到不重启app）
语言切换需要重新刷新的ui（尽量做到不重启app）
数据的不同语言保存
横屏切换语言，字体和语言，webview等影响
webview切换语言影响
打包，混淆，资源压缩，图片压缩
预加载缓存数据，图片，so等
关联性接口请求优化
并发请求处理
页面关闭时释放会延迟，需要考虑新页面是否有影响
启动图各个尺寸手机适配问题
字体大小不随系统变动
文字，图片资源加密和解密
so编写加解密方法，加大破解难度
打包命令bat化，节约多个包打包时间
域名切换，异常上报，维护，客服等
不同包名，不同展示考虑
基础框架搭建，风格，loading，缺省页，弹窗，app升级，隐藏功能等
Scheme外部跳转兼容
推送可跳转直达某些页面兼容
服务器时间戳获取，方便倒计时处理
Socket长链接考虑
api域名访问速度处理
全局拦截器，全局数据刷新，考虑多线程并发问题，考虑加锁后没办法并行执行问题
全局请求参数，应用响应参数，尤其是分页的外部数据处理
.9.png，图片压缩，图片格式等优化，lottie动画，svga动画优化
项目编译速度优化
时效性数据记录过期时间，过期前刷新，账户被顶掉的一些页面处理，UI同步处理
资源差异化处理
Webview加载的兼容性，加载速度，文件下载，文件选择，重定向，视频播放，JS交互，Scheme跳转兼容，内部返回，加载html代码等
权限兼容处理
本地数据库加载，或者下载数据库文件进行加载
SpanStringBuilder文本颜色，背景，链接点击跳转
页面响应速度一定要快，先显示loading也行
复杂的页面要使用动态加载UI，不要全部写在XML
APP名称，图标等动态替换，夜间模式等考虑，常用字体，风格封装
插件apk方式加载功能
文字图片等资源，单独放到一个lib
接口拦截，判断重复请求
多渠道资源配置问题，最主要是用到lib需要切换的情况
数据缓存问题，可能参数加密和时间相关，会导致无法读取缓存
低版本不支持的页面
风格、渠道、域名等通过重新打包实现替换资源文件